//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LibraryManager.FilteringService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FilteringService.IFilterBooksService")]
    public interface IFilterBooksService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilterBooksService/FilterByCategories", ReplyAction="http://tempuri.org/IFilterBooksService/FilterByCategoriesResponse")]
        int[] FilterByCategories(string[] categories);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilterBooksService/FilterByCategories", ReplyAction="http://tempuri.org/IFilterBooksService/FilterByCategoriesResponse")]
        System.Threading.Tasks.Task<int[]> FilterByCategoriesAsync(string[] categories);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilterBooksService/FilterByPrice", ReplyAction="http://tempuri.org/IFilterBooksService/FilterByPriceResponse")]
        int[] FilterByPrice(double startRange, double endRange, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilterBooksService/FilterByPrice", ReplyAction="http://tempuri.org/IFilterBooksService/FilterByPriceResponse")]
        System.Threading.Tasks.Task<int[]> FilterByPriceAsync(double startRange, double endRange, string currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilterBooksService/FilterByState", ReplyAction="http://tempuri.org/IFilterBooksService/FilterByStateResponse")]
        int[] FilterByState(bool includeBorrowed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilterBooksService/FilterByState", ReplyAction="http://tempuri.org/IFilterBooksService/FilterByStateResponse")]
        System.Threading.Tasks.Task<int[]> FilterByStateAsync(bool includeBorrowed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilterBooksService/FilterByAuthor", ReplyAction="http://tempuri.org/IFilterBooksService/FilterByAuthorResponse")]
        int[] FilterByAuthor(string author);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFilterBooksService/FilterByAuthor", ReplyAction="http://tempuri.org/IFilterBooksService/FilterByAuthorResponse")]
        System.Threading.Tasks.Task<int[]> FilterByAuthorAsync(string author);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFilterBooksServiceChannel : LibraryManager.FilteringService.IFilterBooksService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FilterBooksServiceClient : System.ServiceModel.ClientBase<LibraryManager.FilteringService.IFilterBooksService>, LibraryManager.FilteringService.IFilterBooksService {
        
        public FilterBooksServiceClient() {
        }
        
        public FilterBooksServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FilterBooksServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FilterBooksServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FilterBooksServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int[] FilterByCategories(string[] categories) {
            return base.Channel.FilterByCategories(categories);
        }
        
        public System.Threading.Tasks.Task<int[]> FilterByCategoriesAsync(string[] categories) {
            return base.Channel.FilterByCategoriesAsync(categories);
        }
        
        public int[] FilterByPrice(double startRange, double endRange, string currency) {
            return base.Channel.FilterByPrice(startRange, endRange, currency);
        }
        
        public System.Threading.Tasks.Task<int[]> FilterByPriceAsync(double startRange, double endRange, string currency) {
            return base.Channel.FilterByPriceAsync(startRange, endRange, currency);
        }
        
        public int[] FilterByState(bool includeBorrowed) {
            return base.Channel.FilterByState(includeBorrowed);
        }
        
        public System.Threading.Tasks.Task<int[]> FilterByStateAsync(bool includeBorrowed) {
            return base.Channel.FilterByStateAsync(includeBorrowed);
        }
        
        public int[] FilterByAuthor(string author) {
            return base.Channel.FilterByAuthor(author);
        }
        
        public System.Threading.Tasks.Task<int[]> FilterByAuthorAsync(string author) {
            return base.Channel.FilterByAuthorAsync(author);
        }
    }
}
